breakpoint;
load (7,1);		//Load Exception Handler
load (15,9);		//load Interrupt 7

[READY_LIST + 0] = 0;		// Sets the entry for PID as 0

//load (16,13);		//Load pages for INIT
//load (17,14);
//load (18,15);

PTBR = 1024;
PTLR = 4;

[PTBR + 0] = 13; 		// 1st Word of Page Table Entry 1 - Page Number
[PTBR + 1] = "00"; 		// 2nd Word of Page Table Entry 1 - Auxiliary Information
[PTBR + 2] = 14; 		// 1st Word of Page Table Entry 2 - Page Number
[PTBR + 3] = "00";		// 2nd Word of Page Table Entry 2 - Auxiliary Information
[PTBR + 4] = 15; 		// 1st Word of Page Table Entry 3 - Page Number
[PTBR + 5] = "00";		// 2nd Word of Page Table Entry 3 - Auxiliary Information
[PTBR + 6] = 16; 		// 1st Word of Page Table Entry 4 - Page Number of stack 
[PTBR + 7] = "01"; 		// 2nd Word of Page Table Entry 4 - Auxiliary Information

[READY_LIST + 1] = 2;	 	// Sets the entry for STATE as 2 (Running)

SP = 3 * 512;

[19 * 512] = 0;

load (9, 3);		//Load Interrupt 1
load (10, 4);		//Load Interrupt 2
load (11, 5);		//Load Interrupt 3
load (12, 6);		//Load Interrupt 4
load (13, 7);		//Load Interrupt 5
load (14, 8);		//Load Interrupt 6
load (15, 9);		//Load Interrupt 7


load (8, 2);		//Load Timer Interrupt


load (5,10);		//FAT

load (6,11);		//Disk Free List

alias counter S0;			
counter = 0;
while (counter <  128) do			// 64 entries, each of size 2 words
	[ FILE_TABLE + counter + 0] = -1;	// Set FAT Index to -1
	[ FILE_TABLE + counter + 1] =  0;	// Set File Open Count to 0
	counter = counter + 2;			// Move to next entry
endwhile;

counter = 15;
while (counter < 31) do
	[READY_LIST + counter] = -1;
	counter = counter + 1;
endwhile;

counter = 0;
while (counter < 64) do
	if (counter <= 16) then
		[MEM_LIST + counter] = 1;
	else
		[MEM_LIST + counter] = 0;
	endif;
	counter = counter + 1;
endwhile;
breakpoint;
print("Loaded OS");
ireturn;

