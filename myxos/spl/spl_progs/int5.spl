alias physicalSP S0;
physicalSP = ([PTBR + 6] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

if (sysCallNo == 8) then		//Fork System Call
	print("=>Fork");
	
	alias childPCB S2;
	alias childPID S11;
	
	childPCB = 0;
	while (childPCB < 1024) do
		if ([READY_LIST + childPCB + 1] == 0) then
			childPID = childPCB/32;
			[READY_LIST + childPCB] = childPID;
			break;
		endif;
		childPCB = childPCB + 32;
	endwhile;
	if (childPCB >= 1024) then
		[physicalSP - 2] = -1;
		print("No Free PCB");
		ireturn;
	endif;	
	
	alias counter S3;
	alias numpages S4;
	
	numpages = 0;
	counter = 1;
	while (counter < 7) do
		if (([PTBR + counter] % 10) == 1) then
			numpages = numpages + 1;
		endif;
		counter = counter + 2;
	endwhile;
	
	alias i S5;
	
	alias childpagetable S10;
	childpagetable = 8 * childPID + 1024;	//physical address of child page table
	
	
	i = 0;
	counter = 0;
	while (counter < 64) do
		if ([MEM_LIST + counter] == 0) then
			if (i != 2*numpages) then
				if (([PTBR + i + 1] % 10) == 1) then
					[childpagetable + i] = counter;
					[childpagetable + i + 1] = "01";
					store ([PTBR + i],12);
					load (counter,12);
				else
					[childpagetable + i] = [PTBR + i];
					[childpagetable + i + 1] = "00";
				endif;
				i = i + 2;
			else
				[childpagetable + 6] = counter;
				[childpagetable + 7] = "01";
				store ([PTBR + 7],12);
				load (counter,12);
				break;
			endif;
			
		endif;
		
		counter = counter + 1;
	endwhile;
	//if (counter >= 64) then
		//print("Mem Full");
		//[physicalSP - 2] = -1;
		//ireturn;
	//endif;
	
	
	alias temp S12;
	temp = READY_LIST + childPCB;
	
	[temp + 1] = 1;
	[temp + 5] = childpagetable;
	[temp + 4] = [physicalSP];
	[temp + 3] = SP - 1;
	[temp + 2] = BP;
	[temp + 6] = PTLR;
	[temp + 7] = R0;
	[temp + 8] = R1;
	[temp + 9] = R2;
	[temp + 10] = R3;
	[temp + 11] = R4;
	[temp + 12] = R5;
	[temp + 13] = R6;
	[temp + 14] = R7;
	
	alias parentPCB S13;
	parentPCB = READY_LIST + 32 * ((PTBR - 1024) / 8);
	
	alias temp2 S14;
	alias temp3 S15;
	
	
	
	counter = 15;
	while (counter < 31) do
		temp = READY_LIST + childPCB + counter;
		temp3 = parentPCB + counter;
		
		[temp] = [temp3];
		[temp + 1] = [temp3];
		temp2 = FILE_TABLE + [temp3] + 1;
		[temp2] = [temp2] + 1;
		counter = counter + 2;
	endwhile;
	
	
	[physicalSP - 2] = childPID;
	
	physicalSP = ([childpagetable + 6] * 512) + (SP % 512);
	
	[physicalSP - 2] = -2;
	
	breakpoint;
	ireturn;
	
endif;

