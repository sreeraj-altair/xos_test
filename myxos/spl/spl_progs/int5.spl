//breakpoint;
alias physicalSP S0;
physicalSP = ([PTBR + 6] * 512) + (SP % 512);

		//Fork System Call

	alias childPCB S2;
	alias childPID S11;
	alias childpagetable S6;
	

	childPCB = READY_LIST;
	while (childPCB < 2560) do
		if ([childPCB + 1] == 0) then
			childPID = (childPCB - READY_LIST)/32;
			[childPCB] = childPID;
			break;
		endif;
		childPCB = childPCB + 32;
	endwhile;
	if (childPCB >= 2560) then
		[physicalSP - 2] = -1;
		//breakpoint;
		ireturn;
	endif;	
	
	childpagetable = 8 * childPID + 1024;	//physical address of child page table

	alias counter S3;
	alias childstack S4;
	alias diskstack S12;
	
	counter = 0;
	while (counter < 64) do
		if ([MEM_LIST + counter] == 0) then
			childstack = counter;
			[MEM_LIST + counter] = 1;
			break;
		endif;
		counter = counter + 1;
	endwhile;
	if (counter >= 64) then
		
		//breakpoint;
		alias victim S9;
		alias freeswap S10;
				
		counter = PTBR + 8;
		while (1) do
			if ((((counter - 1024) % 8) != 6) && (([counter + 1] % 10) == 1)) then
				if (([counter + 1] / 10) == 1) then
					[counter + 1] = "01";
				else
					freeswap = 448;
					while (freeswap < 512) do
						if ([DISK_LIST + freeswap] == 0) then
							breakpoint;
							store ([counter], freeswap);
							[DISK_LIST + freeswap] = [DISK_LIST + freeswap] + 1;
							victim = [counter];
							[counter] = freeswap;
							[counter + 1] = "00";
							break;
						endif;
						freeswap = freeswap + 1;
					endwhile;
					if (freeswap >= 512) then
						[physicalSP - 2] = -1;
						//breakpoint;
						ireturn;
					endif;
					break;
				endif;
			endif;			
			counter = counter + 2;
			if (counter == 1280) then
				counter = 1024;
			endif;
		endwhile;	
		childstack = victim;		
		//breakpoint;
	endif;

	alias parentstack S5;
	parentstack = [PTBR + 6];

	counter = 0;
	while (counter < 512) do
		[(childstack * 512) + counter] = [(parentstack * 512) + counter];
		counter = counter + 1;
	endwhile;

	
	[childpagetable + 6] = childstack;
	[childpagetable + 7] = "01";
		
	alias page S7;
	alias temp1 S8;
	
	counter = 0;
	while (counter < 6) do
		page = [PTBR + counter];
		temp1 = childpagetable + counter;
		[temp1] = page;
		[temp1 + 1] = [PTBR + counter + 1];
		if (([PTBR + counter + 1] % 10) == 1) then
			[MEM_LIST + page] = [MEM_LIST + page] + 1;
		else
			if (page >= 448) then
				temp1 = DISK_LIST + page;
				[temp1] = [temp1] + 1;
			endif;
		endif;
		counter = counter + 2;
	endwhile;
	
	store (6,20);
	
	alias temp S9;
	temp = childPCB;

	[temp + 1] = 1;
	[temp + 5] = childpagetable;
	[temp + 4] = [physicalSP];
	[temp + 3] = SP - 1;
	[temp + 2] = BP;
	[temp + 6] = PTLR;
	[temp + 7] = R0;
	[temp + 8] = R1;
	[temp + 9] = R2;
	[temp + 10] = R3;
	[temp + 11] = R4;
	[temp + 12] = R5;
	[temp + 13] = R6;
	[temp + 14] = R7;

	alias parentPCB S13;
	//parentPCB = READY_LIST + 4 * (PTBR - 1024);
	parentPCB = 4 * PTBR - 2560; 

	alias temp2 S14;
	alias temp3 S15;

	counter = 15;
	while (counter < 31) do
		temp = childPCB + counter;
		temp3 = parentPCB + counter;
	
		[temp] = [temp3];
		[temp + 1] = [temp3];
		temp2 = FILE_TABLE + [temp3] + 1;
		[temp2] = [temp2] + 1;
		counter = counter + 2;
	endwhile;

	[physicalSP - 2] = childPID;

	physicalSP = ([childpagetable + 6] * 512) + (SP % 512);

	[physicalSP - 2] = -2;
	//breakpoint;
	ireturn;
