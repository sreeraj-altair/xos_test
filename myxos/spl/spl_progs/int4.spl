alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];

alias filedesc S2;
filedesc = [physicalSP - 4];

alias wordtowrite S3;
wordtowrite = [physicalSP - 3];

if (sysCallNo == 5) then		// Write System Call
	print("=>Write");
	
	if (filedesc < 0 || filedesc > 7) then
		print("Invalid desc");
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	alias currentPID S4;
	currentPID = (PTBR - 1024) / 8;
	alias currentPCB S5;
	currentPCB = READY_LIST + 32 * currentPID;
	
	alias globalentry S6;
	alias lseek S7;
	
	
	if ([currentPCB + 15 + 2*filedesc] == -1) then
		[physicalSP - 2] = -1;
		ireturn;
	else
		globalentry = [currentPCB + 15 + 2*filedesc];
		lseek = [currentPCB + 16 + 2*filedesc];
	endif;
	alias fatentry S1;
	alias basicblock S4;
	
	fatentry = [FILE_TABLE + 2*globalentry];
	basicblock = [FAT + fatentry + 2];
	
	load (1,basicblock);
	
	if (lseek/512 == 256) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	alias counter S6;
	if ([SCRATCHPAD + lseek/512] == 0) then
		counter = 1;
		while (counter < 448) do
			if ([DISK_LIST + counter] == 0) then
				[DISK_LIST + counter] = 1;
				break;
			endif;
			counter = counter + 1;
		endwhile;
		if (counter >= 448) then
			[physicalSP - 2] = -1;
			ireturn;
		endif;
		
		[SCRATCHPAD + lseek/512] = counter;
		
		store (1,basicblock);
		[FAT + fatentry + 1] = [FAT + fatentry + 1] + 512;
		
		store (FAT/512,10);
		store (DISK_LIST/512,11);
	endif;
	
	alias data S6;
	data = [SCRATCHPAD + lseek/512];
	
	load (1,data );
	
	[SCRATCHPAD + lseek%512] = wordtowrite;
	
	
	store (1, data);
		
	[currentPCB + 16 + 2*filedesc] = lseek + 1;
	
	[physicalSP - 2] = 0;
	
	ireturn;			
	
endif;
